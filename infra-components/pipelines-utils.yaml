apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-configmap-value
spec:
  params:
    - name: IMAGE
      default: registry.redhat.io/openshift4/ose-cli
      type: string
    - name: CONFIGMAP-NAME
      type: string
    - name: CONFIGMAP-KEY
      type: string
  results:
    - name: VALUE
      description: the value read
  steps:
    - name: oc
      image: $(params.IMAGE)
      script: |
        #!/usr/bin/env bash
        set -eu -o pipefail

        VALUE=$(oc get configmap $(params.CONFIGMAP-NAME) -o jsonpath='{.data.$(params.CONFIGMAP-KEY)}')

        echo -n "$VALUE" > $(results.VALUE.path)

        echo "Read value is $VALUE"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: set-configmap-value
spec:
  params:
    - name: IMAGE
      default: registry.redhat.io/openshift4/ose-cli
      type: string
    - name: CONFIGMAP-NAME
      type: string
    - name: CONFIGMAP-KEY
      type: string
    - name: VALUE
      type: string
  steps:
    - name: oc
      image: $(params.IMAGE)
      script: |
        #!/usr/bin/env bash
        set -eu -o pipefail

        oc patch configmap/$(params.CONFIGMAP-NAME) --type merge -p '{"data":{"$(params.CONFIGMAP-KEY)":"$(params.VALUE)"}}'
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clean-pvs
spec:
  workspaces:
    - name: artifacts
    - name: varlibcontainers
      mountPath: /var/lib/containers
  steps:
    - name: clean
      image: registry.access.redhat.com/ubi8/buildah:8.5-14
      script: |
        #!/usr/bin/env bash
        set -eu -o pipefail

        if [ -f "$(workspaces.artifacts.path)/artifacts.tar" ]; then
          echo "Deleting artifacts.tar"
          rm -rf $(workspaces.artifacts.path)/artifacts.tar
        fi

        echo "Cleaning container image cache"
        buildah rmi --all
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-startbuild-cli
spec:
  params:
    - name: IMAGE
      default: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      type: string
    - name: BUILDCONFIG-NAME
      type: string
  results:
    - name: VALUE
      description: the value read
    - name: URL
      description: the image url
    - name: DIGEST
      description: the image digest
  steps:
    - name: oc
      image: $(params.IMAGE)
      env:
        - name: HOME
          value: /tekton/home
      script: |
        #!/usr/bin/env bash

        [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && cd $(workspaces.manifest-dir.path)

        [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

        set -eu -o pipefail
        
        oc start-build $(params.BUILDCONFIG-NAME) --wait --follow

        #VALUE=$(oc get buildconfig $(params.BUILDCONFIG-NAME) -o jsonpath='{.status.imageChangeTriggers[0].lastTriggeredImageID}')

        IMAGE=$(oc get buildconfig $(params.BUILDCONFIG-NAME) -o jsonpath='{.spec.output.to.name}' | cut -d ':' -f 1)

        VALUE=$(oc get is $IMAGE -o jsonpath='{.status.tags[0].items[0].dockerImageReference}')

        echo -n "$VALUE" > $(results.VALUE.path)

        echo "Built image is $VALUE"

        URL=$(echo $VALUE | cut -d '@' -f 1)

        echo -n "$URL" > $(results.URL.path)

        echo "URL is $URL"

        DIGEST=$(echo $VALUE | cut -d '@' -f 2 | cut -d ':' -f 2)

        echo -n "$DIGEST" > $(results.DIGEST.path)

        echo "Digest is $DIGEST"
  workspaces:
    - name: manifest-dir
      optional: true
    - name: kubeconfig-dir
      optional: true
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: scan-code
spec:
  params:
    - default: 'docker.io/sonarsource/sonar-scanner-cli:latest'
      name: scanImage
      type: string
    - default: 'https://sonarqube-sonarqube.apps.cluster-tpn6s.sandbox2653.opentlc.com/'
      name: sonarqubeHostUrl
      type: string
    - default: object-detection-rest
      name: sonarqubeProjectKey
      type: string
    - default: object-detection-rest-sonarqube-secret
      name: sonarqubeProjectSecret
      type: string
    - default: object-detection-rest-sonarqube-secret
      name: sonarqubeProjectSecretKey
      type: string
    - default: 'true'
      name: verbose
      type: string
    - default: './'
      name: path
      type: string
  steps:
    - env:
        - name: SONAR_TOKEN_WEB_UI
          valueFrom:
            secretKeyRef:
              key: $(params.sonarqubeProjectSecretKey)
              name: $(params.sonarqubeProjectSecret)
      image: $(params.scanImage)
      name: scan-code
      resources: {}
      script: >
        set -x

        echo $(ls -a)

        sonar-scanner -X -Dsonar.projectKey=$(params.sonarqubeProjectKey)
        -Dsonar.sources=$(params.path) -Dsonar.host.url=$(params.sonarqubeHostUrl)
        -Dsonar.login=$SONAR_TOKEN_WEB_UI
      workingDir: /workspace/repository
  workspaces:
    - name: repository
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cosign
spec:
  params:
    - default: 'gcr.io/projectsigstore/cosign'
      name: IMAGE
      type: string
    - default: 'empty'
      name: IMAGETOSIGN
      type: string
    - default: 'cosign-key'
      name: COSIGNKEY
      type: string
  steps:
    - image: $(params.IMAGE)
      name: sign-container
      resources: {}
      args:
        - sign
        - --key
        - $(params.COSIGNKEY)
        - $(params.IMAGETOSIGN)
        - -y
        - --upload=true
      workingDir: /workspace/repository
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: image-copy-pipeline
spec:
  params:
    - name: image-tag
  workspaces:
    - name: empty
  tasks:
    - name: get-image-built
      taskRef:
        name: get-configmap-value
      params:
        - name: CONFIGMAP-NAME
          value: "helloservlet-pipelineconfig"
        - name: CONFIGMAP-KEY
          value: "dev-latest-built-image"
    - name: getpushpath
      taskRef:
        name: get-configmap-value
      params:
        - name: CONFIGMAP-NAME
          value: "helloservlet-pipelineconfig"
        - name: CONFIGMAP-KEY
          value: "release-image-path"
    - name: copy
      taskRef:
        name: skopeo-copy
        kind: ClusterTask
      runAfter:
        - getpushpath
        - get-image-built
      workspaces:
        - name: images-url
          workspace: empty
      params:
        - name: srcImageURL
          value: "docker://$(tasks.get-image-built.results.VALUE)"
        - name: destImageURL
          value: "docker://$(tasks.getpushpath.results.VALUE):$(params.image-tag)"
        - name: srcTLSverify
          value: "false"
        - name: destTLSverify
          value: "false"