apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: jboss-eap
  application: ${APPLICATION_NAME}
message: This is an OpenShift template to deploy jboss-eap based applications.
metadata:
  name: jboss-eap
  annotations:
    description: "jboss-eap Template"
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
        annotations:
          kubernetes.io/change-cause: ${CAUSE}
          gitcommit: ${CAUSE}
      spec:
        serviceAccountName: default
        volumes:
          - name: eap-keystore-volume
            secret:
              secretName: ${HTTPS_SECRET}
          - name: eap-jgroups-keystore-volume
            secret:
              secretName: ${JGROUPS_ENCRYPT_SECRET}
        containers:
          - name: jboss-eap
            image: ${IMAGE}
            env:
              - name: HOSTNAME_HTTP
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: hostname-http
              - name: HOSTNAME_HTTPS
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: hostname-https
              - name: JGROUPS_PING_PROTOCOL
                value: dns.DNS_PING
              - name: OPENSHIFT_DNS_PING_SERVICE_NAME
                value: ${APPLICATION_NAME}-ping
              - name: OPENSHIFT_DNS_PING_SERVICE_PORT
                value: "8888"
              - name: HTTPS_KEYSTORE_DIR
                value: /etc/eap-secret-volume
              - name: HTTPS_KEYSTORE
                value: ${HTTPS_KEYSTORE}
              - name: HTTPS_KEYSTORE_TYPE
                value: ${HTTPS_KEYSTORE_TYPE}
              - name: HTTPS_NAME
                value: ${HTTPS_NAME}
              - name: HTTPS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: https-password
              - name: MQ_QUEUES
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-queues
              - name: MQ_TOPICS
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-topics
              - name: JGROUPS_ENCRYPT_SECRET
                value: ${JGROUPS_ENCRYPT_SECRET}
              - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
                value: /etc/jgroups-encrypt-secret-volume
              - name: JGROUPS_ENCRYPT_KEYSTORE
                value: ${JGROUPS_ENCRYPT_KEYSTORE}
              - name: JGROUPS_ENCRYPT_NAME
                value: ${JGROUPS_ENCRYPT_NAME}
              - name: JGROUPS_ENCRYPT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: jgroups-encrypt-password
              - name: JGROUPS_CLUSTER_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: jgroups-cluster-password
              - name: AUTO_DEPLOY_EXPLODED
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: auto-deploy-exploded
              - name: DS1_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-name
              - name: DS1_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-username
              - name: DS1_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-password
              - name: SSO_URL
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-url
              - name: SSO_REALM
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-realm
              - name: SSO_PUBLIC_KEY
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-public-key
              - name: SSO_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-username
              - name: SSO_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-password
              - name: SSO_BEARER_ONLY
                value: "false"
              - name: SSO_CLIENT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-client
              - name: SSO_ENABLE_CORS
                value: "false"
              - name: SSO_SECRET
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-secret
              - name: SSO_DISABLE_SSL_CERTIFICATE_VALIDATION
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: sso-disable-ssl-certificate-validation
              - name: ENABLE_GENERATE_DEFAULT_DATASOURCE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: enable-generate-default-datasource
              - name: DB_SERVICE_PREFIX_MAPPING
                value: ocp-postgresql=DS1
              - name: OCP_POSTGRESQL_SERVICE_HOST
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ocp-postgresql-service-host
              - name: OCP_POSTGRESQL_SERVICE_PORT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ocp-postgresql-service-port
              - name: DS1_CONNECTION_CHECKER
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-connection-checker
              - name: DS1_DRIVER
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-driver
              - name: DS1_EXCEPTION_SORTER
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-exception-sorter
              - name: DS1_MAX_POOL_SIZE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-max-pool-size
              - name: DS1_MIN_POOL_SIZE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-min-pool-size
              - name: DS1_NONXA
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ds1-nonxa
              - name: AB_PROMETHEUS_ENABLE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ab-prometheus-enable
              - name: MQ_SERVICE_PREFIX_MAPPING
                value: "${APPLICATION_NAME}-amq7=MQ"
              - name: MQ_JNDI
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-jndi
              - name: MQ_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-username
              - name: MQ_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-password
              - name: MQ_PROTOCOL
                value: "tcp"
              - name: MQ_SERIALIZABLE_PACKAGES
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-serializable-packages
              - name: JBOSS_EAP_AMQ_TCP_SERVICE_HOST
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: amq-service-host
              - name: JBOSS_EAP_AMQ_TCP_SERVICE_PORT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: amq-service-port
            livenessProbe:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - "/opt/eap/bin/livenessProbe.sh"
              initialDelaySeconds: 60
            readinessProbe:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - "/opt/eap/bin/readinessProbe.sh"
              initialDelaySeconds: 10
            ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
              - containerPort: 8778
                protocol: TCP
              - containerPort: 8888
                protocol: TCP
              - containerPort: 9799
                protocol: TCP
            resources:
              requests:
                cpu: "500m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: ${MEMORY_LIMIT}
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: eap-keystore-volume
                mountPath: /etc/eap-secret-volume
                readOnly: true
              - name: eap-jgroups-keystore-volume
                mountPath: /etc/jgroups-encrypt-secret-volume
                readOnly: true
        initContainers:
          - name: ${APPLICATION_NAME}-wait-migration
            image: ${MIGRATION_IMAGE}
            env:
              - name: FLYWAY_USER
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-username
              - name: FLYWAY_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-password
              - name: DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: database-name
              - name: DATABASE_HOST
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ocp-postgresql-service-host
              - name: DATABASE_PORT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: ocp-postgresql-service-port
              - name: FLYWAY_URL
                value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
              - name: FLYWAY_PARAMS
                value: 'validate'
        restartPolicy: Always
        terminationGracePeriodSeconds: 75
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      prometheus.io/port: '9799'
      prometheus.io/scrape: 'true'
  spec:
    ports:
      - name: 8080-tcp
        protocol: TCP
        port: 8080
        targetPort: 8080
      - name: 9799-tcp
        protocol: TCP
        port: 9799
        targetPort: 9799
    selector:
      app: ${APPLICATION_NAME}
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: Service
  metadata:
    name: secure-${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    ports:
      - name: 8443-tcp
        protocol: TCP
        port: 8443
        targetPort: 8443
    selector:
      app: ${APPLICATION_NAME}
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-ping
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      description: "The JGroups ping port for clustering"
  spec:
    publishNotReadyAddresses: true
    clusterIP: None
    ports:
      - name: 8888-tcp
        protocol: TCP
        port: 8888
        targetPort: 8888
    selector:
      app: ${APPLICATION_NAME}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: secure-${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    to:
      kind: Service
      name: secure-${APPLICATION_NAME}
    port:
      targetPort: 8443-tcp
    tls:
      termination: passthrough
    wildcardPolicy: None
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: jboss-eap
  required: true
- displayName: Server Keystore Secret Name
  description: The name of the secret containing the keystore file
  name: HTTPS_SECRET
  value: eap-ssl-secret
  required: true
- displayName: Server Keystore Filename
  description: The name of the keystore file within the secret
  name: HTTPS_KEYSTORE
  value: eapkeystore.jks
  required: false
- displayName: Server Keystore Type
  description: The type of the keystore file (JKS or JCEKS)
  name: HTTPS_KEYSTORE_TYPE
  value: JKS
  required: false
- displayName: Server Certificate Name
  description: The name associated with the server certificate
  name: HTTPS_NAME
  value: https
  required: false
- description: The name of the secret containing the keystore file
  displayName: JGroups Secret Name
  name: JGROUPS_ENCRYPT_SECRET
  value: eap-jgroup-secret
  required: false
- description: Name of the keystore file within the secret specified via JGROUPS_ENCRYPT_SECRET variable, when using SYM_ENCRYPT JGroups cluster traffic encryption protocol. If not set, cluster communication is not encrypted and a warning is issued
  displayName: JGroups Keystore Filename
  name: JGROUPS_ENCRYPT_KEYSTORE
  value: eapjgroups.jceks
  required: false
- description: Name associated with the server’s certificate, when using SYM_ENCRYPT JGroups cluster traffic encryption protocol. If not set, cluster communication is not encrypted and a warning is issued
  displayName: JGroups Certificate Name
  name: JGROUPS_ENCRYPT_NAME
  value: jgroups
  required: false
- description: Memory Limit
  name: MEMORY_LIMIT
  value: '1Gi'
  required: false
- description: Container image to use
  name: IMAGE
  required: true
- description: Container image to use for migration
  name: MIGRATION_IMAGE
  required: true
- description: Description of this deployment
  name: CAUSE