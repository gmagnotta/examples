apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: amqbroker
  application: ${APPLICATION_NAME}
message: This is a template to provision amq broker.
metadata:
  name: amqbroker
  annotations:
    description: "amqbroker template"
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: amq-broker-rhel8
  spec:
    lookupPolicy:
      local: true
    tags:
    - annotations:
        description: Red Hat AMQ Broker 7 image
      from:
        kind: DockerImage
        name: registry.redhat.io/amq7/amq-broker-rhel8:7.8
      name: latest
      referencePolicy:
        type: Local
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-amq-claim
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APPLICATION_NAME}
  data:
    mq-role: ${MQ_ROLE}
    mq-protocol: ${MQ_PROTOCOL}
    mq-queues: ${MQ_QUEUES}
    mq-topics: ${MQ_TOPICS}
    mq-serializable-packages: ${MQ_SERIALIZABLE_PACKAGES}
    amq-split: ${AMQ_SPLIT}
    amq-mesh-discovery-type: ${AMQ_MESH_DISCOVERY_TYPE}
    amq-storage-usage-limit: ${AMQ_STORAGE_USAGE_LIMIT}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APPLICATION_NAME}
  data:
    mq-username: ${MQ_USERNAME}
    mq-password: ${MQ_PASSWORD}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
        annotations:
          alpha.image.policy.openshift.io/resolve-names: '*'
      spec:
        volumes:
          - name: ${APPLICATION_NAME}-amq-pvol
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}-amq-claim
        containers:
          - name: amq
            securityContext:
              runAsNonRoot: true
              seccompProfile:
                type: RuntimeDefault
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
            image: amq-broker-rhel8:latest
            env:
              - name: AMQ_USER
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-username
              - name: AMQ_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-password
              - name: AMQ_ROLE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-role
              - name: AMQ_TRANSPORTS
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-protocol
              - name: AMQ_QUEUES
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-queues
              - name: AMQ_ADDRESSES
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-topics
              - name: MQ_SERIALIZABLE_PACKAGES
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: mq-serializable-packages
              - name: AMQ_SPLIT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: amq-split
              - name: AMQ_MESH_DISCOVERY_TYPE
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: amq-mesh-discovery-type
              - name: AMQ_MESH_SERVICE_NAME
                value: ${APPLICATION_NAME}-amq-mesh
              - name: AMQ_MESH_SERVICE_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: "metadata.namespace"
              - name: AMQ_STORAGE_USAGE_LIMIT
                valueFrom:
                  configMapKeyRef:
                    name: ${APPLICATION_NAME}
                    key: amq-storage-usage-limit
            ports:
              - name: console-jolokia
                containerPort: 8161
                protocol: TCP
              - name: amqp
                containerPort: 5672
                protocol: TCP
              - name: amqp-ssl
                containerPort: 5671
                protocol: TCP
              - name: mqtt
                containerPort: 1883
                protocol: TCP
              - name: stomp
                containerPort: 61613
                protocol: TCP
              - name: stomp-ssl
                containerPort: 61612
                protocol: TCP
              - name: tcp
                containerPort: 61616
                protocol: TCP
              - name: tcp-ssl
                containerPort: 61617
                protocol: TCP
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: ${APPLICATION_NAME}-amq-pvol
                mountPath: /opt/amq/data/kahadb
            livenessProbe:
              exec:
                command:
                - "/bin/bash"
                - "-c"
                - "/opt/amq/bin/readinessProbe.sh"
              initialDelaySeconds: 60
        restartPolicy: Always
        terminationGracePeriodSeconds: 60
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: Recreate
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      description: The broker's exposed ports.
  spec:
    ports:
      - name: 8161-tcp
        port: 8161
        targetPort: 8161
      - name: 61616-tcp
        port: 61616
        targetPort: 61616
    selector:
      app: ${APPLICATION_NAME}
    type: ClusterIP
    sessionAffinity: None
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-amq-mesh
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      description: "Supports node discovery for mesh formation"
  spec:
    publishNotReadyAddresses: true
    clusterIP: None
    ports:
      - name: mesh
        port: 61616
    selector:
      app: ${APPLICATION_NAME}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    to:
      name: ${APPLICATION_NAME}
    port:
      targetPort: 8161-tcp
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: amqbroker
  required: true
- displayName: AMQ Role
  description: AMQ Role for authenticated user
  name: MQ_ROLE
  value: admin
  required: true
- displayName: AMQ Protocols
  description: "Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP"
  name: MQ_PROTOCOL
  value: openwire
  required: true
- displayName: Queues
  description: "Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker."
  name: MQ_QUEUES
  value: ''
  required: false
- displayName: Topics
  description: "Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker."
  name: MQ_TOPICS
  value: ''
  required: false
- displayName: AMQ Serializable Packages
  description: List of packages that are allowed to be serialized for use in ObjectMessage, separated by commas. If your app doesn't use ObjectMessages, leave this blank. This is a security enforcement. For the rationale, see http://activemq.apache.org/objectmessage.html"
  name: MQ_SERIALIZABLE_PACKAGES
  value: ''
  required: false
- displayName: Split the data directory?
  description: Split the data directory for each node in a mesh.
  name: AMQ_SPLIT
  value: 'false'
  required: true
- displayName: AMQ Mesh Discovery Type
  description: "The discovery agent type to use for discovering mesh endpoints.  'dns' will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes REST API to resolve service endpoints.  If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace."
  name: AMQ_MESH_DISCOVERY_TYPE
  value: 'dns'
  required: true
- displayName: AMQ Storage Limit
  description: "The AMQ storage usage limit"
  name: AMQ_STORAGE_USAGE_LIMIT
  value: '1 gb'
  required: true
- displayName: AMQ Username
  description: "User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated."
  name: MQ_USERNAME
  value: 'dXNlcg=='
  required: true
- displayName: AMQ Password
  description: "Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated."
  name: MQ_PASSWORD
  value: 'cGFzc3dvcmQ='
  required: true
- displayName: Database Volume Capacity
  description: Size of persistent storage for database volume.
  name: VOLUME_CAPACITY
  value: '1Gi'
  required: true
- displayName: Container Memory Limit
  description: Container memory limit.
  name: MEMORY_LIMIT
  value: 1Gi
  required: false