apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: jws56-openjdk11-openshift-rhel8
spec:
  lookupPolicy:
    local: true
  tags:
  - annotations:
      description: Red Hat JBoss WS 5.6 Image
    from:
      kind: DockerImage
      name: registry.redhat.io/jboss-webserver-5/jws56-openjdk11-openshift-rhel8
    name: latest
    referencePolicy:
      type: Local
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: hello-tomcat
spec:
  lookupPolicy:
    local: true
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: hello-tomcat-artifact
spec:
  lookupPolicy:
    local: true
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: hello-tomcat-artifact
  labels:
    application: hello-tomcat
spec:
  resources:
    limits:
      cpu: 1000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 512Mi
  source:
    type: Git
    git:
      ref: master
      uri: 'https://github.com/gmagnotta/examples'
    contextDir: hello-tomcat
  strategy:
    type: Source
    sourceStrategy:
      forcePull: true
      incremental: true
      from:
        kind: ImageStreamTag
        name: 'jws56-openjdk11-openshift-rhel8:latest'
      env:
        - name: MAVEN_ARGS_APPEND
          value: ''
        - name: MAVEN_S2I_GOALS
          value: 'clean package'
  postCommit: {}
  runPolicy: Serial
  output:
    to:
      kind: ImageStreamTag
      name: 'hello-tomcat-artifact:latest'
  triggers: []
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: hello-tomcat
  labels:
    application: hello-tomcat
spec:
  resources: {}
  source:
    type: Dockerfile
    dockerfile: |-
      FROM jws56-openjdk11-openshift-rhel8:latest
      COPY /hello-tomcat.war /deployments/ROOT.war
    images:
    - from:
        kind: ImageStreamTag
        name: 'hello-tomcat-artifact:latest'
      paths:
      - sourcePath: '/deployments/hello-tomcat.war'
        destinationDir: '.'
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: ImageStreamTag
        name: 'jws56-openjdk11-openshift-rhel8:latest'
  postCommit: {}
  runPolicy: Serial
  output:
    to:
      kind: ImageStreamTag
      name: 'hello-tomcat:latest'
  triggers: []
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: hello-tomcat-pipelineconfig
data:
  release-image-path: 'quay.io/gmagnotta/hello-tomcat'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: source-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: hello-tomcat
spec:
  workspaces:
    - name: source
  tasks:
    - name: fetch-source
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: source
      params:
        - name: url
          value: "https://github.com/gmagnotta/examples"
        - name: deleteExisting
          value: "true"
    - name: compile-artifacts
      taskRef:
        name: s2i-startbuild-cli
      runAfter:
        - fetch-source
      params:
        - name: BUILDCONFIG-NAME
          value: "hello-tomcat-artifact"
    - name: build-runtime-image
      taskRef:
        name: s2i-startbuild-cli
      runAfter:
        - compile-artifacts
      params:
        - name: BUILDCONFIG-NAME
          value: "hello-tomcat"
    - name: deploy
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - build-runtime-image
      workspaces:
        - name: manifest-dir
          workspace: source
      params:
        - name: SCRIPT
          value: |
            cd hello-tomcat/k8s/overlay/dev

            cat <<EOF > kustomization.yaml
            apiVersion: kustomize.config.k8s.io/v1beta1
            kind: Kustomization

            resources:
            - ../../base
            images:
            - name: hello-tomcat
              newName: $(tasks.build-runtime-image.results.VALUE)
            EOF

            oc apply -k .
    - name: update-built-image
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - build-runtime-image
      params:
        - name: SCRIPT
          value: |
            set -eu -o pipefail

            oc patch configmap/hello-tomcat-pipelineconfig --type merge -p '{"data":{"dev-latest-built-image":"$(tasks.build-runtime-image.results.VALUE)"}}'
    - name: update-built-digest
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - build-runtime-image
      params:
        - name: SCRIPT
          value: |
            set -eu -o pipefail

            oc patch configmap/hello-tomcat-pipelineconfig --type merge -p '{"data":{"dev-latest-built-digest":"$(tasks.build-runtime-image.results.DIGEST)"}}'
    - name: sign-image
      taskRef:
        name: cosign
      runAfter:
        - update-built-image
      params:
        - name: IMAGETOSIGN
          value: $(tasks.build-runtime-image.results.VALUE)
        - name: COSIGNKEY
          value: "k8s://giuseppe-magnotta-dev/signing-secrets"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: hello-tomcat-publish
spec:
  params:
    - name: image-tag
  workspaces:
    - name: empty
  tasks:
    - name: get-image-built
      taskRef:
        name: get-configmap-value
      params:
        - name: CONFIGMAP-NAME
          value: "hello-tomcat-pipelineconfig"
        - name: CONFIGMAP-KEY
          value: "dev-latest-built-image"
    - name: getpushpath
      taskRef:
        name: get-configmap-value
      params:
        - name: CONFIGMAP-NAME
          value: "hello-tomcat-pipelineconfig"
        - name: CONFIGMAP-KEY
          value: "release-image-path"
    - name: copy
      taskRef:
        name: skopeo-copy
        kind: ClusterTask
      runAfter:
        - getpushpath
        - get-image-built
      workspaces:
        - name: images-url
          workspace: empty
      params:
        - name: srcImageURL
          value: "docker://$(tasks.get-image-built.results.VALUE)"
        - name: destImageURL
          value: "docker://$(tasks.getpushpath.results.VALUE):$(params.image-tag)"
        - name: srcTLSverify
          value: "false"
        - name: destTLSverify
          value: "false"
    - name: sign-image
      taskRef:
        name: cosign
      runAfter:
        - copy
      params:
        - name: IMAGETOSIGN
          value: $(tasks.getpushpath.results.VALUE):$(params.image-tag)
        - name: COSIGNKEY
          value: "k8s://giuseppe-magnotta-dev/signing-secrets"