apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: kafka
  application: ${APPLICATION_NAME}
message: This is a template to provision kafka.
metadata:
  name: kafka
  annotations:
    description: "kafka template"
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
        annotations:
          alpha.image.policy.openshift.io/resolve-names: '*'
      spec:
        containers:
          - name: zookeeper
            image: quay.io/debezium/zookeeper:1.9
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            imagePullPolicy: IfNotPresent
          - name: kafka
            image: quay.io/debezium/kafka:1.9
            env:
              - name: NODE_ROLE
                value: 'combined'
              - name: KAFKA_PORT
                value: '9092'
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            imagePullPolicy: IfNotPresent
          - name: connect
            image: quay.io/debezium/connect:1.9
            env:
              - name: GROUP_ID
                value: '1'
              - name: CONFIG_STORAGE_TOPIC
                value: 'my_connect_configs'
              - name: OFFSET_STORAGE_TOPIC
                value: 'my_connect_offsets'
              - name: STATUS_STORAGE_TOPIC
                value: 'my_connect_statuses'
            ports:
              - name: zookeeper
                containerPort: 9092
                protocol: TCP
              - name: zookeeper2
                containerPort: 3306
                protocol: TCP
              - name: zookeeper3
                containerPort: 8083
                protocol: TCP
            resources:
              limits:
                memory: ${MEMORY_LIMIT}
            imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 60
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: Recreate
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
    annotations:
      description: The broker's exposed ports.
  spec:
    ports:
      - name: zookeeper-tcp
        port: 9092
        targetPort: 9092
      - name: zookeeper2-tcp
        port: 3306
        targetPort: 3306
      - name: zookeeper3-tcp
        port: 8083
        targetPort: 8083
    selector:
      app: ${APPLICATION_NAME}
    type: ClusterIP
    sessionAffinity: None
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: kafka
  required: true
- displayName: Container Memory Limit
  description: Container memory limit.
  name: MEMORY_LIMIT
  value: 1Gi
  required: false
