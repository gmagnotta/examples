This project wants to demonstrate how it is possible to migrate a legacy monolith Java Enterprise application as a container running in OpenShift Container Platform by adopting DevOps practices.

The application is a simple JavaEE web store application.

It requires:
- PostgreSQL database
- Red Hat Single Sign On (Keycloak) to manage user authentication and authorization
- AMQ Broker to integrate with other applications

The idea is to use Red Hat JBoss EAP OpenShift Container image, inside an OpenShift Pipeline (tekton)

The pipeline will download source code, then will start the compilation phase with S2I and container image creation. Plus, flyway is used to show how is possible to manage database migrations in the process.

----------
How to try

First you need to deploy PostgreSQL database (see the template in infra-components project) and then create an user and a database to dedicate to this JavaEE application.

Second you need to deploy Red Hat SSO (see the template in infra-components). The SSO can use the same PostgreSQL instance you deployed before, but make sure to provision a separate user and database dedicated to sso.

Then you need to deploy Red Hat AMQ Broker 

After you have a working SSO then create a new Realm for this JavaEE application and then create a new application that identify this JavaEE.

The client must be of type 'openid-connect' and have 'confidential' access type. You need to take note the public sig key of the realm and the Secret Credential of the client. They will be needed when deployng the configuration for the application (passed as env variables in deply.sh)

Then modify the deploy.sh script in order to fill it with all the required values and finally execute it.

The script will generate the certificates needed for https and then will create a kubernetes Secret and a Configmap to store application data.

You can import the OpenShift pipeline.

Finally start the pipeline and enjoy the monolith built and started inside OpenShift.


----

Create quay.io credentials

oc secrets link default quay
oc secrets link pipeline quay --for=pull,mount

oc secrets link default registry-redhat-io-sa-pull-secret
oc secrets link pipeline registry-redhat-io-sa-pull-secret --for=pull,mount

oc apply -f ../infra-components/pipelines-common.yaml

oc create configmap template-jboss-eap-test --from-file=jboss-eap-test-template.yaml

oc create configmap template-jboss-eap-test-migration --from-file=jboss-eap-test-migration.yaml

oc apply -f jboss-eap-test-pipelines.yaml


CONTAINER="postgresql-578df4dfbb-5dwqp"
oc exec $CONTAINER -- /bin/bash -c 'psql postgres -c "drop database jboss;"' && \
oc exec $CONTAINER -- /bin/bash -c 'psql postgres -c "drop user jboss;"'

oc exec $CONTAINER -- /bin/bash -c 'psql postgres -c "create database jboss;"' && \
oc exec $CONTAINER -- /bin/bash -c "psql postgres -c \"create user jboss with encrypted password 'jboss';\"" && \
oc exec $CONTAINER -- /bin/bash -c 'psql postgres -c "grant all privileges on database jboss to jboss;"' && \
oc exec $CONTAINER -- /bin/bash -c 'psql postgres -c "ALTER user \"jboss\" REPLICATION;"' && \
oc exec $CONTAINER -- /bin/bash -c 'psql jboss -c "CREATE PUBLICATION dbz_publication FOR ALL TABLES;"'

./deploy.sh

----------
Local Testing

You can replicate the S2I build on your laptop. You need to provision the same infrastructure

podman run --rm -d -e AMQ_USER="amq" -e AMQ_PASSWORD="amq" -e AMQ_ROLE="admin" -e AMQ_QUEUES="getTopItemsCommand,getTopOrdersCommand,createOrderCommand,invalidMessage" -p 8161:8161 -p 61616:61616 registry.redhat.io/amq7/amq-broker-rhel8:7.8


podman volume create jbosseap
podman run -d --name jbosseap_database -e POSTGRESQL_USER=jboss -e POSTGRESQL_PASSWORD=jboss -e POSTGRESQL_DATABASE=jboss -p 5432:5432 -v postgres:/var/lib/pgsql/data registry.redhat.io/rhel8/postgresql-10
PODMAN="jbosseap_database"
#podman exec -ti $PODMAN /bin/bash -c 'psql postgres -c "create database jboss;"' && \
#podman exec -ti $PODMAN /bin/bash -c "psql postgres -c \"create user jboss with encrypted password 'jboss';\"" && \
#podman exec -ti $PODMAN /bin/bash -c 'psql postgres -c "grant all privileges on database jboss to jboss;"' && \
podman exec -ti $PODMAN /bin/bash -c 'psql postgres -c "ALTER user \"jboss\" REPLICATION;"' && \
podman exec -ti $PODMAN /bin/bash -c 'psql jboss -c "CREATE PUBLICATION dbz_publication FOR ALL TABLES;"' && \
podman exec -ti $PODMAN /bin/bash -c "sed -i 's/\#wal_level \= replica/wal_level \= logical/g' /var/lib/pgsql/data/userdata/postgresql.conf" && \
podman exec -ti $PODMAN /bin/bash -c "sed -i 's/\#max_wal_senders \= 10/max_wal_senders \= 4/g' /var/lib/pgsql/data/userdata/postgresql.conf" && \
podman exec -ti $PODMAN /bin/bash -c "sed -i 's/\#smax_replication_slots \= 10/max_replication_slots \= 4/g' /var/lib/pgsql/data/userdata/postgresql.conf" && \
podman restart jbosseap_database


###

https://community.oracle.com/tech/developers/discussion/1726370/preventing-direct-access-to-jsf
https://blog.adamgamboa.dev/friendly-url-in-jsf-with-a-simple-rewriter-url/
