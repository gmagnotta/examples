---
#
# Playbook to create an installation of 3scale that uses S3 as file storage
#

# https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.6/html/managing_hybrid_and_multicloud_resources/object-bucket-claim
# https://github.com/pittar/3scale-noobaa

- name: Deploy 3scale in OpenShift cluster
  hosts: localhost
  vars:
    project: "3scale-project"
    wildcard_domain: "example.com"
  tasks:

    - name: Create OperatorGroup
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: my3scale
            namespace: "{{ project }}"
          spec:
            targetNamespaces:
              - "{{ project }}"
            upgradeStrategy: Default

    - name: Create Subscription
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: 3scale-operator
            namespace: "{{ project }}"
          spec:
            channel: threescale-2.14
            name: 3scale-operator
            installPlanApproval: Automatic
            source: redhat-operators
            sourceNamespace: openshift-marketplace
            startingCSV: 3scale-operator.v0.11.10

    - name: Create S3 Bucket
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: objectbucket.io/v1alpha1
          kind: ObjectBucketClaim
          metadata:
            name: 3scale-obc
            namespace: "{{ project }}"
          spec:
            generateBucketName: 3scale
            storageClassName: openshift-storage.noobaa.io

    - name: Wait for Bucket creation
      kubernetes.core.k8s_info:
        api_version: objectbucket.io/v1alpha1
        kind: ObjectBucketClaim
        name: 3scale-obc
        namespace: "{{ project }}"
      register: result
      until: result.resources[0].status.phase == "Bound"
      retries: 5
      delay: 10

    - name: Extract AWS_ACCESS_KEY_ID
      command: "oc get secret 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.AWS_ACCESS_KEY_ID|base64decode{{ '}}' }}\""
      register: aws_access_key_id 
    - name: Print value
      ansible.builtin.debug:
        msg: "AWS_ACCESS_KEY_ID={{ aws_access_key_id.stdout }}"

    - name: Extract AWS_SECRET_ACCESS_KEY
      command: "oc get secret 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.AWS_SECRET_ACCESS_KEY|base64decode{{ '}}' }}\""
      register: aws_secret_access_key
    - name: Print value
      ansible.builtin.debug:
        msg: "AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key.stdout }}"

    - name: Extract BUCKET_HOST
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_HOST{{ '}}' }}\""
      register: bucket_host
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_HOST={{ bucket_host.stdout }}"

    - name: Extract BUCKET_NAME
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_NAME{{ '}}' }}\""
      register: bucket_name
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_NAME={{ bucket_name.stdout }}"
    
    - name: Extract BUCKET_PORT
      command: "oc get configmap 3scale-obc -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.BUCKET_PORT{{ '}}' }}\""
      register: bucket_port
    - name: Print value
      ansible.builtin.debug:
        msg: "BUCKET_PORT={{ bucket_port.stdout }}"

    - name: Create S3 Secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: 3scale-s3-auth
            namespace: "{{ project }}"
          data:
            AWS_ACCESS_KEY_ID: "{{ aws_access_key_id.stdout | b64encode }}"
            AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key.stdout | b64encode }}"
            AWS_BUCKET: "{{ bucket_name.stdout | b64encode }}"
            AWS_REGION: "bm9vYmFh"
            AWS_HOSTNAME: "{{ bucket_host.stdout | b64encode }}"
            AWS_PROTOCOL: "SFRUUFM="
            AWS_PATH_STYLE: "dHJ1ZQ=="
    
    - name: Create APIManager
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps.3scale.net/v1alpha1
          kind: APIManager
          metadata:
            name: apimanager-sample
            namespace: "{{ project }}"
          spec:
            system:
              appSpec:
                replicas: 1
              sidekiqSpec:
                replicas: 1
              fileStorage:
                simpleStorageService:
                  configurationSecretRef:
                    name: 3scale-s3-auth
            zync:
              appSpec:
                replicas: 1
              queSpec:
                replicas: 1
            backend:
              cronSpec:
                replicas: 1
              listenerSpec:
                replicas: 1
              workerSpec:
                replicas: 1
            apicast:
              productionSpec:
                replicas: 1
              stagingSpec:
                replicas: 1
            wildcardDomain: "{{ wildcard_domain }}"
            resourceRequirementsEnabled: false
    
    - name: Wait for APIManager
      kubernetes.core.k8s_info:
        api_version: apps.3scale.net/v1alpha1
        kind: APIManager
        name: apimanager-sample
        namespace: "{{ project }}"
      register: result
      until: result.resources[0].status.conditions[0].type == "Available"
      retries: 5
      delay: 10

    - name: Extract ADMIN PORTAL USER
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.ADMIN_USER|base64decode{{ '}}' }}\""
      register: admin_user
    - name: Print value
      ansible.builtin.debug:
        msg: "ADMIN_USER={{ admin_user.stdout }}"
    
    - name: Extract ADMIN PORTAL PASSWORD
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.ADMIN_PASSWORD|base64decode{{ '}}' }}\""
      register: admin_password
    - name: Print value
      ansible.builtin.debug:
        msg: "ADMIN_PASSWORD={{ admin_password.stdout }}"

    - name: Extract MASTER ADMIN USER
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.MASTER_USER|base64decode{{ '}}' }}\""
      register: master_user
    - name: Print value
      ansible.builtin.debug:
        msg: "MASTER_USER={{ master_user.stdout }}"
    
    - name: Extract MASTER ADMIN PASSWORD
      command: "oc get secret system-seed -n {{ project }} -o go-template --template=\"{{ '{{' }}.data.MASTER_PASSWORD|base64decode{{ '}}' }}\""
      register: master_password
    - name: Print value
      ansible.builtin.debug:
        msg: "MASTER_PASSWORD={{ master_password.stdout }}"
