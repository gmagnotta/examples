apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: template-infra
message: This is a template to start infra components.
metadata:
  name: template-infra
  annotations:
    description: "infra template"
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: amqstreams
    labels:
      app: amqstreams
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: amqstreams
    template:
      metadata:
        labels:
          app: amqstreams
      spec:
        containers:
          - name: zookeeper
            image: quay.io/gmagnotta/amqstreams
            command: ["/opt/kafka/bin/zookeeper-server-start.sh" ]
            args: ["/opt/kafka/config/zookeeper.properties"]
          - name: kafka
            image: quay.io/gmagnotta/amqstreams
            command: ["/opt/kafka/bin/kafka-server-start.sh"]
            args: ["/opt/kafka/config/server.properties"]
            ports:
              - containerPort: 9092
                protocol: TCP
            resources:
              requests:
                cpu: "500m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "1024Mi"
            imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: amqstreams
    labels:
      app: amqstreams
  spec:
    ports:
      - name: 9092-tcp
        protocol: TCP
        port: 9092
        targetPort: 9092
    selector:
      app: amqstreams
    type: ClusterIP
    sessionAffinity: None
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: jaeger
    labels:
      app: jaeger
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: jaeger
    template:
      metadata:
        labels:
          app: jaeger
      spec:
        containers:
          - name: jaeger
            image: quay.io/jaegertracing/all-in-one:1.21.0
            ports:
              - containerPort: 5775
                protocol: UDP
              - containerPort: 6831
                protocol: UDP
              - containerPort: 6832
                protocol: UDP
              - containerPort: 5778
                protocol: TCP
              - containerPort: 16686
                protocol: TCP
              - containerPort: 14268
                protocol: TCP
            resources:
              requests:
                cpu: "500m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "1024Mi"
            imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: jaeger
    labels:
      app: jaeger
  spec:
    ports:
      - name: 5775-udp
        protocol: UDP
        port: 5775
        targetPort: 5775
      - name: 6831-udp
        protocol: UDP
        port: 6831
        targetPort: 6831
      - name: 6832-udp
        protocol: UDP
        port: 6832
        targetPort: 6832
      - name: 5778-tcp
        protocol: TCP
        port: 5778
        targetPort: 5778
      - name: 16686-tcp
        protocol: TCP
        port: 16686
        targetPort: 16686
      - name: 14268-tcp
        protocol: TCP
        port: 14268
        targetPort: 14268
    selector:
      app: jaeger
    type: ClusterIP
    sessionAffinity: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: jaeger
    labels:
      app: jaeger
  spec:
    to:
      kind: Service
      name: jaeger
      weight: 100
    port:
      targetPort: 16686-tcp
    wildcardPolicy: None
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: prometheus
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: view
  subjects:
  - kind: ServiceAccount
    name: prometheus
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: prometheus
    labels:
      app: prometheus
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
      spec:
        containers:
          - name: prometheus
            image: quay.io/gmagnotta/prometheus
            args: ["--config.file=/opt/prometheus/prometheus.yml"]
            ports:
              - containerPort: 9090
                protocol: TCP
            resources:
              requests:
                cpu: "500m"
                memory: "128Mi"
              limits:
                cpu: "1000m"
                memory: "1024Mi"
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: config-volume
                mountPath: /opt/prometheus/prometheus.yml
                subPath: prometheus.yml
        serviceAccountName: prometheus
        volumes:
          - name: config-volume
            configMap:
              name: prometheus
              items:
              - key: prometheus.yaml
                path: prometheus.yml
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
    revisionHistoryLimit: 10
    progressDeadlineSeconds: 600
- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus
    labels:
      app: prometheus
  spec:
    ports:
      - name: 9090-tcp
        protocol: TCP
        port: 9090
        targetPort: 9090
    selector:
      app: prometheus
    type: ClusterIP
    sessionAffinity: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: prometheus
    labels:
      app: prometheus
  spec:
    to:
      kind: Service
      name: prometheus
      weight: 100
    port:
      targetPort: 9090-tcp
    wildcardPolicy: None
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus
  data:
    prometheus.yaml: |-
      global:
        scrape_interval: 15s
        external_labels:
          monitor: 'codelab-monitor'
      alerting:
        alertmanagers:
          - static_configs:
              - targets:
      scrape_configs:
        - job_name: "kubernetes-service-endpoints"

          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                  - 'eap-demo'

          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

          relabel_configs:

            # Relabel to scrape only endpoints that have
            # "prometheus.io/scrape = true" annotation.
            - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            # Relabel to scrape only single, desired port for the service based
            # on endpoints "prometheus.io/scrape_port = <port>" annotation.
            - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_scrape_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
parameters:
